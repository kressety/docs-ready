name: Extract Markdown Files

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'GitHub repository (format: owner/repo)'
        required: true
        type: string

jobs:
  extract-md-files:
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate repository format
        run: |
          if [[ ! "${{ github.event.inputs.repository }}" =~ ^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$ ]]; then
            echo "Error: Invalid repository format. Please use 'owner/repo'"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download repository
        run: |
          REPO="${{ github.event.inputs.repository }}"
          REPO_NAME=$(echo "$REPO" | cut -d'/' -f2)
          git clone "https://github.com/$REPO.git" "$REPO_NAME"

      - name: Extract markdown files
        run: |
          REPO="${{ github.event.inputs.repository }}"
          REPO_NAME=$(echo "$REPO" | cut -d'/' -f2)
          mkdir -p docs-$REPO_NAME
          
          declare -A file_counts
          
          find "$REPO_NAME" -type f -name "*.md" | while read -r file; do
            filename=$(basename "$file")
            target_file="docs-$REPO_NAME/$filename"
            
            if [ -f "$target_file" ]; then
              base_name="${filename%.*}"
              extension="${filename##*.}"
              count=${file_counts["$base_name"]:-1}
              while [ -f "docs-$REPO_NAME/${base_name}_${count}.${extension}" ]; do
                ((count++))
              done
              file_counts["$base_name"]=$count
              target_file="docs-$REPO_NAME/${base_name}_${count}.${extension}"
            fi
            
            if ! cp "$file" "$target_file"; then
              echo "Error: Failed to copy $file"
              exit 1
            fi
          done

      - name: Sanitize artifact name and upload
        run: |
          REPO="${{ github.event.inputs.repository }}"
          # Replace '/' with '-' to create a valid artifact name
          SANITIZED_NAME=$(echo "$REPO" | tr '/' '-')
          echo "Uploading artifact with name: docs-$SANITIZED_NAME"
          # Use the sanitized name in the upload step
          echo "ARTIFACT_NAME=docs-$SANITIZED_NAME" >> $GITHUB_ENV
        # Upload artifact using the sanitized name from the environment variable
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: docs-*
          if-no-files-found: error